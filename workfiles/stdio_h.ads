pragma Ada_2005;
pragma Style_Checks (Off);

with Interfaces.C; use Interfaces.C;
with libio_h;
with stdarg_h;
with uG_config_h;
with Interfaces.C.Strings;
with System;
with stddef_h;
with x86_64_linux_gnu_bits_types_h;

package stdio_h is

   --  unsupported macro: BUFSIZ _IO_BUFSIZ

   SEEK_SET : constant := 0;  --  /usr/include/stdio.h:141
   SEEK_CUR : constant := 1;  --  /usr/include/stdio.h:142
   SEEK_END : constant := 2;  --  /usr/include/stdio.h:143

   P_tmpdir : aliased constant String := "/tmp" & ASCII.NUL;  --  /usr/include/stdio.h:148
   --  unsupported macro: stdin stdin
   --  unsupported macro: stdout stdout
   --  unsupported macro: stderr stderr
   --  arg-macro: procedure getc (_fp)
   --    _IO_getc (_fp)
   --  arg-macro: procedure putc (_ch, _fp)
   --    _IO_putc (_ch, _fp)

  -- Define ISO C stdio on top of C++ iostreams.
  --   Copyright (C) 1991, 1994-2008, 2009, 2010 Free Software Foundation, Inc.
  --   This file is part of the GNU C Library.
  --   The GNU C Library is free software; you can redistribute it and/or
  --   modify it under the terms of the GNU Lesser General Public
  --   License as published by the Free Software Foundation; either
  --   version 2.1 of the License, or (at your option) any later version.
  --   The GNU C Library is distributed in the hope that it will be useful,
  --   but WITHOUT ANY WARRANTY; without even the implied warranty of
  --   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  --   Lesser General Public License for more details.
  --   You should have received a copy of the GNU Lesser General Public
  --   License along with the GNU C Library; if not, write to the Free
  --   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
  --   02111-1307 USA.   

  -- *	ISO C99 Standard: 7.19 Input/output	<stdio.h>
  --  

  -- Define outside of namespace so the C++ is happy.   
  -- The opaque type of streams.  This is the definition used elsewhere.   
   subtype FILE is libio_h.u_IO_FILE;

  -- The opaque type of streams.  This is the definition used elsewhere.   
   subtype uu_FILE is libio_h.u_IO_FILE;

   subtype va_list is stdarg_h.uu_gnuc_va_list;  -- /usr/include/stdio.h:80

  -- The type of the second argument to `fgetpos' and `fsetpos'.   
   subtype fpos_t is uG_config_h.u_G_fpos_t;

   subtype fpos64_t is uG_config_h.u_G_fpos64_t;

  -- The possibilities for the third argument to `setvbuf'.   
  -- Default buffer size.   
  -- End of file character.
  --   Some things throughout the library rely on this being -1.   

  -- The possibilities for the third argument to `fseek'.
  --   These values should not be changed.   

  -- Default path prefix for `tempnam' and `tmpnam'.   
  -- Get the values:
  --   L_tmpnam	How long an array of chars must be to be passed to `tmpnam'.
  --   TMP_MAX	The minimum number of unique filenames generated by tmpnam
  --   		(and tempnam when it uses tmpnam's name space),
  --		or tempnam (the two are separate).
  --   L_ctermid	How long an array to pass to `ctermid'.
  --   L_cuserid	How long an array to pass to `cuserid'.
  --   FOPEN_MAX	Minimum number of files that can be open at once.
  --   FILENAME_MAX	Maximum length of a filename.   

  -- Standard streams.   
  -- Standard input stream.   
   stdin : access libio_h.u_IO_FILE;  -- /usr/include/stdio.h:165
   pragma Import (C, stdin, "stdin");

  -- Standard output stream.   
   stdout : access libio_h.u_IO_FILE;  -- /usr/include/stdio.h:166
   pragma Import (C, stdout, "stdout");

  -- Standard error output stream.   
   stderr : access libio_h.u_IO_FILE;  -- /usr/include/stdio.h:167
   pragma Import (C, stderr, "stderr");

  -- C89/C99 say they're macros.  Make them happy.   
  -- Remove file FILENAME.   
   function remove (uu_filename : Interfaces.C.Strings.chars_ptr) return int;  -- /usr/include/stdio.h:175
   pragma Import (C, remove, "remove");

  -- Rename file OLD to NEW.   
   function rename (uu_old : Interfaces.C.Strings.chars_ptr; uu_new : Interfaces.C.Strings.chars_ptr) return int;  -- /usr/include/stdio.h:177
   pragma Import (C, rename, "rename");

  -- Rename file OLD relative to OLDFD to NEW relative to NEWFD.   
   function renameat
     (uu_oldfd : int;
      uu_old : Interfaces.C.Strings.chars_ptr;
      uu_newfd : int;
      uu_new : Interfaces.C.Strings.chars_ptr) return int;  -- /usr/include/stdio.h:182
   pragma Import (C, renameat, "renameat");

  -- Create a temporary file and open it read/write.
  --   This function is a possible cancellation points and therefore not
  --   marked with __THROW.   

   function tmpfile return access FILE;  -- /usr/include/stdio.h:192
   pragma Import (C, tmpfile, "tmpfile");

   function tmpfile64 return access FILE;  -- /usr/include/stdio.h:202
   pragma Import (C, tmpfile64, "tmpfile64");

  -- Generate a temporary filename.   
   function tmpnam (uu_s : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr;  -- /usr/include/stdio.h:206
   pragma Import (C, tmpnam, "tmpnam");

  -- This is the reentrant variant of `tmpnam'.  The only difference is
  --   that it does not allow S to be NULL.   

   function tmpnam_r (uu_s : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr;  -- /usr/include/stdio.h:212
   pragma Import (C, tmpnam_r, "tmpnam_r");

  -- Generate a unique temporary filename using up to five characters of PFX
  --   if it is not NULL.  The directory to put this file in is searched for
  --   as follows: First the environment variable "TMPDIR" is checked.
  --   If it contains the name of a writable directory, that directory is used.
  --   If not and if DIR is not NULL, that value is checked.  If that fails,
  --   P_tmpdir is tried and finally "/tmp".  The storage for the filename
  --   is allocated by `malloc'.   

   function tempnam (uu_dir : Interfaces.C.Strings.chars_ptr; uu_pfx : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr;  -- /usr/include/stdio.h:224
   pragma Import (C, tempnam, "tempnam");

  -- Close STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fclose (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:234
   pragma Import (C, fclose, "fclose");

  -- Flush STREAM, or all streams if STREAM is NULL.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fflush (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:239
   pragma Import (C, fflush, "fflush");

  -- Faster versions when locking is not required.
  --   This function is not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation it is a cancellation point and
  --   therefore not marked with __THROW.   

   function fflush_unlocked (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:249
   pragma Import (C, fflush_unlocked, "fflush_unlocked");

  -- Close all streams.
  --   This function is not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation it is a cancellation point and
  --   therefore not marked with __THROW.   

   function fcloseall return int;  -- /usr/include/stdio.h:259
   pragma Import (C, fcloseall, "fcloseall");

  -- Open a file and create a new stream for it.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fopen (uu_filename : Interfaces.C.Strings.chars_ptr; uu_modes : Interfaces.C.Strings.chars_ptr) return access FILE;  -- /usr/include/stdio.h:269
   pragma Import (C, fopen, "fopen");

  -- Open a file, replacing an existing stream with it.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function freopen
     (uu_filename : Interfaces.C.Strings.chars_ptr;
      uu_modes : Interfaces.C.Strings.chars_ptr;
      uu_stream : access FILE) return access FILE;  -- /usr/include/stdio.h:275
   pragma Import (C, freopen, "freopen");

   function fopen64 (uu_filename : Interfaces.C.Strings.chars_ptr; uu_modes : Interfaces.C.Strings.chars_ptr) return access FILE;  -- /usr/include/stdio.h:294
   pragma Import (C, fopen64, "fopen64");

   function freopen64
     (uu_filename : Interfaces.C.Strings.chars_ptr;
      uu_modes : Interfaces.C.Strings.chars_ptr;
      uu_stream : access FILE) return access FILE;  -- /usr/include/stdio.h:296
   pragma Import (C, freopen64, "freopen64");

  -- Create a new stream that refers to an existing system file descriptor.   
   function fdopen (uu_fd : int; uu_modes : Interfaces.C.Strings.chars_ptr) return access FILE;  -- /usr/include/stdio.h:303
   pragma Import (C, fdopen, "fdopen");

  -- Create a new stream that refers to the given magic cookie,
  --   and uses the given functions for input and output.   

   function fopencookie
     (uu_magic_cookie : System.Address;
      uu_modes : Interfaces.C.Strings.chars_ptr;
      uu_io_funcs : libio_h.u_IO_cookie_io_functions_t) return access FILE;  -- /usr/include/stdio.h:309
   pragma Import (C, fopencookie, "fopencookie");

  -- Create a new stream that refers to a memory buffer.   
   function fmemopen
     (uu_s : System.Address;
      uu_len : stddef_h.size_t;
      uu_modes : Interfaces.C.Strings.chars_ptr) return access FILE;  -- /usr/include/stdio.h:316
   pragma Import (C, fmemopen, "fmemopen");

  -- Open a stream that writes into a malloc'd buffer that is expanded as
  --   necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location
  --   and the number of characters written on fflush or fclose.   

   function open_memstream (uu_bufloc : System.Address; uu_sizeloc : access stddef_h.size_t) return access FILE;  -- /usr/include/stdio.h:322
   pragma Import (C, open_memstream, "open_memstream");

  -- If BUF is NULL, make STREAM unbuffered.
  --   Else make it use buffer BUF, of size BUFSIZ.   

   procedure setbuf (uu_stream : access FILE; uu_buf : Interfaces.C.Strings.chars_ptr);  -- /usr/include/stdio.h:329
   pragma Import (C, setbuf, "setbuf");

  -- Make STREAM use buffering mode MODE.
  --   If BUF is not NULL, use N bytes of it for buffering;
  --   else allocate an internal buffer N bytes long.   

   function setvbuf
     (uu_stream : access FILE;
      uu_buf : Interfaces.C.Strings.chars_ptr;
      uu_modes : int;
      uu_n : stddef_h.size_t) return int;  -- /usr/include/stdio.h:333
   pragma Import (C, setvbuf, "setvbuf");

  -- If BUF is NULL, make STREAM unbuffered.
  --   Else make it use SIZE bytes of BUF for buffering.   

   procedure setbuffer
     (uu_stream : access FILE;
      uu_buf : Interfaces.C.Strings.chars_ptr;
      uu_size : stddef_h.size_t);  -- /usr/include/stdio.h:340
   pragma Import (C, setbuffer, "setbuffer");

  -- Make STREAM line-buffered.   
   procedure setlinebuf (uu_stream : access FILE);  -- /usr/include/stdio.h:344
   pragma Import (C, setlinebuf, "setlinebuf");

  -- Write formatted output to STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fprintf (uu_stream : access FILE; uu_format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:353
   pragma Import (C, fprintf, "fprintf");

  -- Write formatted output to stdout.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function printf (uu_format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:359
   pragma Import (C, printf, "printf");

  -- Write formatted output to S.   
   function sprintf (uu_s : Interfaces.C.Strings.chars_ptr; uu_format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:361
   pragma Import (C, sprintf, "sprintf");

  -- Write formatted output to S from argument list ARG.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function vfprintf
     (uu_s : access FILE;
      uu_format : Interfaces.C.Strings.chars_ptr;
      uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:368
   pragma Import (C, vfprintf, "vfprintf");

  -- Write formatted output to stdout from argument list ARG.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function vprintf (uu_format : Interfaces.C.Strings.chars_ptr; uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:374
   pragma Import (C, vprintf, "vprintf");

  -- Write formatted output to S from argument list ARG.   
   function vsprintf
     (uu_s : Interfaces.C.Strings.chars_ptr;
      uu_format : Interfaces.C.Strings.chars_ptr;
      uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:376
   pragma Import (C, vsprintf, "vsprintf");

  -- Maximum chars of output to write in MAXLEN.   
   function snprintf
     (uu_s : Interfaces.C.Strings.chars_ptr;
      uu_maxlen : stddef_h.size_t;
      uu_format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:383
   pragma Import (C, snprintf, "snprintf");

   function vsnprintf
     (uu_s : Interfaces.C.Strings.chars_ptr;
      uu_maxlen : stddef_h.size_t;
      uu_format : Interfaces.C.Strings.chars_ptr;
      uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:387
   pragma Import (C, vsnprintf, "vsnprintf");

  -- Write formatted output to a string dynamically allocated with `malloc'.
  --   Store the address of the string in *PTR.   

   function vasprintf
     (uu_ptr : System.Address;
      uu_f : Interfaces.C.Strings.chars_ptr;
      uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:396
   pragma Import (C, vasprintf, "vasprintf");

   --  skipped func __asprintf

   function asprintf (uu_ptr : System.Address; uu_fmt : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:402
   pragma Import (C, asprintf, "asprintf");

  -- Write formatted output to a file descriptor.
  --   These functions are not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation they are cancellation points and
  --   therefore not marked with __THROW.   

   function vdprintf
     (uu_fd : int;
      uu_fmt : Interfaces.C.Strings.chars_ptr;
      uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:414
   pragma Import (C, vdprintf, "vdprintf");

   function dprintf (uu_fd : int; uu_fmt : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:417
   pragma Import (C, dprintf, "dprintf");

  -- Read formatted input from STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fscanf (uu_stream : access FILE; uu_format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:427
   pragma Import (C, fscanf, "fscanf");

  -- Read formatted input from stdin.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function scanf (uu_format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:433
   pragma Import (C, scanf, "scanf");

  -- Read formatted input from S.   
   function sscanf (uu_s : Interfaces.C.Strings.chars_ptr; uu_format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:435
   pragma Import (C, sscanf, "sscanf");

  -- For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
  --   GNU extension which conflicts with valid %a followed by letter
  --   s, S or [.   

  -- Read formatted input from S into argument list ARG.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function vfscanf
     (uu_s : access FILE;
      uu_format : Interfaces.C.Strings.chars_ptr;
      uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:473
   pragma Import (C, vfscanf, "vfscanf");

  -- Read formatted input from stdin into argument list ARG.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function vscanf (uu_format : Interfaces.C.Strings.chars_ptr; uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:481
   pragma Import (C, vscanf, "vscanf");

  -- Read formatted input from S into argument list ARG.   
   function vsscanf
     (uu_s : Interfaces.C.Strings.chars_ptr;
      uu_format : Interfaces.C.Strings.chars_ptr;
      uu_arg : access System.Address) return int;  -- /usr/include/stdio.h:485
   pragma Import (C, vsscanf, "vsscanf");

  -- For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
  --   GNU extension which conflicts with valid %a followed by letter
  --   s, S or [.   

  -- Read a character from STREAM.
  --   These functions are possible cancellation points and therefore not
  --   marked with __THROW.   

   function fgetc (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:533
   pragma Import (C, fgetc, "fgetc");

   function getc (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:534
   pragma Import (C, getc, "getc");

  -- Read a character from stdin.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function getchar return int;  -- /usr/include/stdio.h:540
   pragma Import (C, getchar, "getchar");

  -- The C standard explicitly says this is a macro, so we always do the
  --   optimization for it.   

  -- These are defined in POSIX.1:1996.
  --   These functions are possible cancellation points and therefore not
  --   marked with __THROW.   

   function getc_unlocked (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:552
   pragma Import (C, getc_unlocked, "getc_unlocked");

   function getchar_unlocked return int;  -- /usr/include/stdio.h:553
   pragma Import (C, getchar_unlocked, "getchar_unlocked");

  -- Faster version when locking is not necessary.
  --   This function is not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation it is a cancellation point and
  --   therefore not marked with __THROW.   

   function fgetc_unlocked (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:563
   pragma Import (C, fgetc_unlocked, "fgetc_unlocked");

  -- Write a character to STREAM.
  --   These functions are possible cancellation points and therefore not
  --   marked with __THROW.
  --   These functions is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fputc (uu_c : int; uu_stream : access FILE) return int;  -- /usr/include/stdio.h:575
   pragma Import (C, fputc, "fputc");

   function putc (uu_c : int; uu_stream : access FILE) return int;  -- /usr/include/stdio.h:576
   pragma Import (C, putc, "putc");

  -- Write a character to stdout.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function putchar (uu_c : int) return int;  -- /usr/include/stdio.h:582
   pragma Import (C, putchar, "putchar");

  -- The C standard explicitly says this can be a macro,
  --   so we always do the optimization for it.   

  -- Faster version when locking is not necessary.
  --   This function is not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation it is a cancellation point and
  --   therefore not marked with __THROW.   

   function fputc_unlocked (uu_c : int; uu_stream : access FILE) return int;  -- /usr/include/stdio.h:596
   pragma Import (C, fputc_unlocked, "fputc_unlocked");

  -- These are defined in POSIX.1:1996.
  --   These functions are possible cancellation points and therefore not
  --   marked with __THROW.   

   function putc_unlocked (uu_c : int; uu_stream : access FILE) return int;  -- /usr/include/stdio.h:604
   pragma Import (C, putc_unlocked, "putc_unlocked");

   function putchar_unlocked (uu_c : int) return int;  -- /usr/include/stdio.h:605
   pragma Import (C, putchar_unlocked, "putchar_unlocked");

  -- Get a word (int) from STREAM.   
   function getw (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:612
   pragma Import (C, getw, "getw");

  -- Write a word (int) to STREAM.   
   function putw (uu_w : int; uu_stream : access FILE) return int;  -- /usr/include/stdio.h:615
   pragma Import (C, putw, "putw");

  -- Get a newline-terminated string of finite length from STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fgets
     (uu_s : Interfaces.C.Strings.chars_ptr;
      uu_n : int;
      uu_stream : access FILE) return Interfaces.C.Strings.chars_ptr;  -- /usr/include/stdio.h:624
   pragma Import (C, fgets, "fgets");

  -- Get a newline-terminated string from stdin, removing the newline.
  --   DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function gets (uu_s : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr;  -- /usr/include/stdio.h:632
   pragma Import (C, gets, "gets");

  -- This function does the same as `fgets' but does not lock the stream.
  --   This function is not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation it is a cancellation point and
  --   therefore not marked with __THROW.   

   function fgets_unlocked
     (uu_s : Interfaces.C.Strings.chars_ptr;
      uu_n : int;
      uu_stream : access FILE) return Interfaces.C.Strings.chars_ptr;  -- /usr/include/stdio.h:642
   pragma Import (C, fgets_unlocked, "fgets_unlocked");

  -- Read up to (and including) a DELIMITER from STREAM into *LINEPTR
  --   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
  --   NULL), pointing to *N characters of space.  It is realloc'd as
  --   necessary.  Returns the number of characters read (not including the
  --   null terminator), or -1 on error or EOF.
  --   These functions are not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation they are cancellation points and
  --   therefore not marked with __THROW.   

   --  skipped func __getdelim

   function getdelim
     (uu_lineptr : System.Address;
      uu_n : access stddef_h.size_t;
      uu_delimiter : int;
      uu_stream : access FILE) return x86_64_linux_gnu_bits_types_h.uu_ssize_t;  -- /usr/include/stdio.h:661
   pragma Import (C, getdelim, "getdelim");

  -- Like `getdelim', but reads up to a newline.
  --   This function is not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation it is a cancellation point and
  --   therefore not marked with __THROW.   

   function getline
     (uu_lineptr : System.Address;
      uu_n : access stddef_h.size_t;
      uu_stream : access FILE) return x86_64_linux_gnu_bits_types_h.uu_ssize_t;  -- /usr/include/stdio.h:671
   pragma Import (C, getline, "getline");

  -- Write a string to STREAM.
  --   This function is a possible cancellation points and therefore not
  --   marked with __THROW.   

   function fputs (uu_s : Interfaces.C.Strings.chars_ptr; uu_stream : access FILE) return int;  -- /usr/include/stdio.h:682
   pragma Import (C, fputs, "fputs");

  -- Write a string, followed by a newline, to stdout.
  --   This function is a possible cancellation points and therefore not
  --   marked with __THROW.   

   function puts (uu_s : Interfaces.C.Strings.chars_ptr) return int;  -- /usr/include/stdio.h:688
   pragma Import (C, puts, "puts");

  -- Push a character back onto the input buffer of STREAM.
  --   This function is a possible cancellation points and therefore not
  --   marked with __THROW.   

   function ungetc (uu_c : int; uu_stream : access FILE) return int;  -- /usr/include/stdio.h:695
   pragma Import (C, ungetc, "ungetc");

  -- Read chunks of generic data from STREAM.
  --   This function is a possible cancellation points and therefore not
  --   marked with __THROW.   

   function fread
     (uu_ptr : System.Address;
      uu_size : stddef_h.size_t;
      uu_n : stddef_h.size_t;
      uu_stream : access FILE) return stddef_h.size_t;  -- /usr/include/stdio.h:702
   pragma Import (C, fread, "fread");

  -- Write chunks of generic data to STREAM.
  --   This function is a possible cancellation points and therefore not
  --   marked with __THROW.   

   function fwrite
     (uu_ptr : System.Address;
      uu_size : stddef_h.size_t;
      uu_n : stddef_h.size_t;
      uu_s : access FILE) return stddef_h.size_t;  -- /usr/include/stdio.h:708
   pragma Import (C, fwrite, "fwrite");

  -- This function does the same as `fputs' but does not lock the stream.
  --   This function is not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation it is a cancellation point and
  --   therefore not marked with __THROW.   

   function fputs_unlocked (uu_s : Interfaces.C.Strings.chars_ptr; uu_stream : access FILE) return int;  -- /usr/include/stdio.h:719
   pragma Import (C, fputs_unlocked, "fputs_unlocked");

  -- Faster versions when locking is not necessary.
  --   These functions are not part of POSIX and therefore no official
  --   cancellation point.  But due to similarity with an POSIX interface
  --   or due to the implementation they are cancellation points and
  --   therefore not marked with __THROW.   

   function fread_unlocked
     (uu_ptr : System.Address;
      uu_size : stddef_h.size_t;
      uu_n : stddef_h.size_t;
      uu_stream : access FILE) return stddef_h.size_t;  -- /usr/include/stdio.h:730
   pragma Import (C, fread_unlocked, "fread_unlocked");

   function fwrite_unlocked
     (uu_ptr : System.Address;
      uu_size : stddef_h.size_t;
      uu_n : stddef_h.size_t;
      uu_stream : access FILE) return stddef_h.size_t;  -- /usr/include/stdio.h:732
   pragma Import (C, fwrite_unlocked, "fwrite_unlocked");

  -- Seek to a certain position on STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fseek
     (uu_stream : access FILE;
      uu_off : long;
      uu_whence : int) return int;  -- /usr/include/stdio.h:742
   pragma Import (C, fseek, "fseek");

  -- Return the current position of STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function ftell (uu_stream : access FILE) return long;  -- /usr/include/stdio.h:747
   pragma Import (C, ftell, "ftell");

  -- Rewind to the beginning of STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   procedure rewind (uu_stream : access FILE);  -- /usr/include/stdio.h:752
   pragma Import (C, rewind, "rewind");

  -- The Single Unix Specification, Version 2, specifies an alternative,
  --   more adequate interface for the two functions above which deal with
  --   file offset.  `long int' is not the right type.  These definitions
  --   are originally defined in the Large File Support API.   

  -- Seek to a certain position on STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fseeko
     (uu_stream : access FILE;
      uu_off : x86_64_linux_gnu_bits_types_h.uu_off_t;
      uu_whence : int) return int;  -- /usr/include/stdio.h:766
   pragma Import (C, fseeko, "fseeko");

  -- Return the current position of STREAM.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function ftello (uu_stream : access FILE) return x86_64_linux_gnu_bits_types_h.uu_off_t;  -- /usr/include/stdio.h:771
   pragma Import (C, ftello, "ftello");

  -- Get STREAM's position.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fgetpos (uu_stream : access FILE; uu_pos : access fpos_t) return int;  -- /usr/include/stdio.h:791
   pragma Import (C, fgetpos, "fgetpos");

  -- Set STREAM's position.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function fsetpos (uu_stream : access FILE; uu_pos : System.Address) return int;  -- /usr/include/stdio.h:796
   pragma Import (C, fsetpos, "fsetpos");

   function fseeko64
     (uu_stream : access FILE;
      uu_off : x86_64_linux_gnu_bits_types_h.uu_off64_t;
      uu_whence : int) return int;  -- /usr/include/stdio.h:811
   pragma Import (C, fseeko64, "fseeko64");

   function ftello64 (uu_stream : access FILE) return x86_64_linux_gnu_bits_types_h.uu_off64_t;  -- /usr/include/stdio.h:812
   pragma Import (C, ftello64, "ftello64");

   function fgetpos64 (uu_stream : access FILE; uu_pos : access fpos64_t) return int;  -- /usr/include/stdio.h:813
   pragma Import (C, fgetpos64, "fgetpos64");

   function fsetpos64 (uu_stream : access FILE; uu_pos : System.Address) return int;  -- /usr/include/stdio.h:814
   pragma Import (C, fsetpos64, "fsetpos64");

  -- Clear the error and EOF indicators for STREAM.   
   procedure clearerr (uu_stream : access FILE);  -- /usr/include/stdio.h:819
   pragma Import (C, clearerr, "clearerr");

  -- Return the EOF indicator for STREAM.   
   function feof (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:821
   pragma Import (C, feof, "feof");

  -- Return the error indicator for STREAM.   
   function ferror (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:823
   pragma Import (C, ferror, "ferror");

  -- Faster versions when locking is not required.   
   procedure clearerr_unlocked (uu_stream : access FILE);  -- /usr/include/stdio.h:828
   pragma Import (C, clearerr_unlocked, "clearerr_unlocked");

   function feof_unlocked (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:829
   pragma Import (C, feof_unlocked, "feof_unlocked");

   function ferror_unlocked (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:830
   pragma Import (C, ferror_unlocked, "ferror_unlocked");

  -- Print a message describing the meaning of the value of errno.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   procedure perror (uu_s : Interfaces.C.Strings.chars_ptr);  -- /usr/include/stdio.h:839
   pragma Import (C, perror, "perror");

  -- Provide the declarations for `sys_errlist' and `sys_nerr' if they
  --   are available on this system.  Even if available, these variables
  --   should not be used directly.  The `strerror' function provides
  --   all the necessary functionality.   

  -- Return the system file descriptor for STREAM.   
   function fileno (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:851
   pragma Import (C, fileno, "fileno");

  -- Faster version when locking is not required.   
   function fileno_unlocked (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:856
   pragma Import (C, fileno_unlocked, "fileno_unlocked");

  -- Create a new stream connected to a pipe running the given command.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function popen (uu_command : Interfaces.C.Strings.chars_ptr; uu_modes : Interfaces.C.Strings.chars_ptr) return access FILE;  -- /usr/include/stdio.h:866
   pragma Import (C, popen, "popen");

  -- Close a stream opened by popen and return the status of its child.
  --   This function is a possible cancellation point and therefore not
  --   marked with __THROW.   

   function pclose (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:872
   pragma Import (C, pclose, "pclose");

  -- Return the name of the controlling terminal.   
   function ctermid (uu_s : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr;  -- /usr/include/stdio.h:878
   pragma Import (C, ctermid, "ctermid");

  -- Return the name of the current user.   
   function cuserid (uu_s : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr;  -- /usr/include/stdio.h:884
   pragma Import (C, cuserid, "cuserid");

  -- See <obstack.h>.   
   --  skipped empty struct obstack

  -- Write formatted output to an obstack.   
   function obstack_printf (uu_obstack : System.Address; uu_format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int;  -- /usr/include/stdio.h:892
   pragma Import (C, obstack_printf, "obstack_printf");

   function obstack_vprintf
     (uu_obstack : System.Address;
      uu_format : Interfaces.C.Strings.chars_ptr;
      uu_args : access System.Address) return int;  -- /usr/include/stdio.h:895
   pragma Import (C, obstack_vprintf, "obstack_vprintf");

  -- These are defined in POSIX.1:1996.   
  -- Acquire ownership of STREAM.   
   procedure flockfile (uu_stream : access FILE);  -- /usr/include/stdio.h:906
   pragma Import (C, flockfile, "flockfile");

  -- Try to acquire ownership of STREAM but do not block if it is not
  --   possible.   

   function ftrylockfile (uu_stream : access FILE) return int;  -- /usr/include/stdio.h:910
   pragma Import (C, ftrylockfile, "ftrylockfile");

  -- Relinquish the ownership granted for STREAM.   
   procedure funlockfile (uu_stream : access FILE);  -- /usr/include/stdio.h:913
   pragma Import (C, funlockfile, "funlockfile");

  -- The X/Open standard requires some functions and variables to be
  --   declared here which do not belong into this header.  But we have to
  --   follow.  In GNU mode we don't do this nonsense.   

  -- If we are compiling with optimizing read this file.  It contains
  --   several optimizing inline functions and macros.   

end stdio_h;
